# Advanced Log Watcher Configuration
# Copy this file to .env and modify as needed

# =============================================================================
# MONITORING INTERVALS
# =============================================================================
# How often to check for new containers/services (in seconds)
# Lower values = more responsive, higher CPU usage
# Higher values = less responsive, lower CPU usage

# Docker container detection interval
DOCKER_CHECK_INTERVAL=0.1

# System service detection interval  
SYSTEM_CHECK_INTERVAL=0.1

# =============================================================================
# LOG CONFIGURATION
# =============================================================================
# Number of historical log lines to show when starting monitoring
LOG_TAIL_LINES=50

# =============================================================================
# ENABLE/DISABLE MONITORING TYPES
# =============================================================================
# Set to 'false' to disable specific monitoring types
# All monitoring types are enabled by default

# Docker container monitoring
ENABLE_DOCKER_MONITORING=true

# System service monitoring (nginx, apache, mysql, etc.)
ENABLE_SYSTEM_MONITORING=true

# File system monitoring (.log files in mounted volumes)
ENABLE_FILE_MONITORING=true

# =============================================================================
# MONITORING BEHAVIOR
# =============================================================================

# File Monitoring Details:
# - Only monitors files with .log extension
# - Auto-detects directories from mounted volumes
# - Uses inotify for instant detection (with polling fallback)
# - Monitors these directories by default: /var/log, /opt/logs, /app/logs
# - To add custom directories, mount them in docker-compose.yml:
#   volumes:
#     - /your/custom/logs:/your/custom/logs:ro

# Docker Container Classification:
# Containers are automatically classified by name patterns:
# - web: nginx, web, http containers
# - api: api, backend, service containers  
# - database: db, mysql, postgres, redis, mongo containers
# - worker: worker, queue, job containers
# - cache: cache, memcache, redis containers
# - proxy: proxy, gateway, router containers
# - monitor: monitor, metrics, stats containers
# - frontend: frontend, ui, client containers
# - container: fallback for unknown containers

# System Service Detection:
# Services are detected by log file paths:
# - nginx: /var/log/nginx/*.log
# - apache: /var/log/apache2/*.log, /var/log/httpd/*.log
# - mysql: /var/log/mysql/error.log
# - postgresql: /var/log/postgresql/*.log
# - redis: /var/log/redis/redis-server.log
# - auth: /var/log/auth.log
# - syslog: /var/log/syslog
# - kernel: /var/log/kern.log
# - And many more...

# =============================================================================
# EXAMPLE CONFIGURATIONS
# =============================================================================

# Development Environment (fast, all monitoring enabled)
# DOCKER_CHECK_INTERVAL=0.1
# SYSTEM_CHECK_INTERVAL=0.1
# ENABLE_DOCKER_MONITORING=true
# ENABLE_SYSTEM_MONITORING=true
# ENABLE_FILE_MONITORING=true

# Production Environment (slower, Docker only)
# DOCKER_CHECK_INTERVAL=1.0
# SYSTEM_CHECK_INTERVAL=5.0
# ENABLE_DOCKER_MONITORING=true
# ENABLE_SYSTEM_MONITORING=false
# ENABLE_FILE_MONITORING=false

# System Monitoring Only (no Docker)
# ENABLE_DOCKER_MONITORING=false
# ENABLE_SYSTEM_MONITORING=true
# ENABLE_FILE_MONITORING=true

# High Performance (minimal monitoring)
# DOCKER_CHECK_INTERVAL=2.0
# SYSTEM_CHECK_INTERVAL=10.0
# ENABLE_DOCKER_MONITORING=true
# ENABLE_SYSTEM_MONITORING=false
# ENABLE_FILE_MONITORING=false

# =============================================================================
# USAGE EXAMPLES
# =============================================================================

# 1. Use defaults (no .env file needed):
#    docker compose up --build

# 2. Override specific values:
#    ENABLE_DOCKER_MONITORING=false docker compose up

# 3. Use .env file for persistent configuration:
#    cp env.example .env
#    # Edit .env file
#    docker compose up

# 4. Run in background:
#    docker compose up -d

# 5. View logs from the watcher itself:
#    docker compose logs -f